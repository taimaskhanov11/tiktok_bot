import asyncio
import random

from aiogram import Router, types
from aiogram.dispatcher.fsm.context import FSMContext
from aiogram.dispatcher.fsm.state import StatesGroup, State

from tiktok_bot.apps.bot import temp
from tiktok_bot.apps.bot.markups.admin import bot_settings_markups

router = Router()


class SendMail(StatesGroup):
    preview = State()
    select = State()

    button = State()
    send = State()


async def bot_setting_start(call: types.CallbackQuery, state: FSMContext, **kwargs):
    await state.clear()
    status = "‚úÖ –ó–∞–ø—É—â–µ–Ω" if temp.BOT_RUNNING else "üö´ –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    await call.message.answer("–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º\n"
                              f"–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:\n{status}", reply_markup=bot_settings_markups.bot_setting_start())


async def start_bot_view(call):
    send_text = "ü§ñ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –æ–∂–∏–¥–∞–π—Ç–µ...\n1"
    message = await call.message.answer(send_text)
    for text in ["–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏",
                 "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏",
                 "–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
                 "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤",
                 "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è"]:
        for sign in ["‚è≥", "‚åõ", "‚úÖ"]:
            await asyncio.sleep(random.uniform(0, 1))
            add_text = f"\n‚ñ∂ {text} {sign}"
            await message.edit_text(f"{send_text}{add_text}")
        send_text += add_text


async def run_bot(call: types.CallbackQuery):
    temp.BOT_RUNNING = True
    await start_bot_view(call)
    await call.message.edit_reply_markup(bot_settings_markups.bot_setting_start())
    await call.message.answer("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")


async def stop_bot(call: types.CallbackQuery):
    temp.BOT_RUNNING = False
    await call.message.edit_reply_markup(bot_settings_markups.bot_setting_start())
    edit_message = await call.message.answer("üïê –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞")
    await asyncio.sleep(random.uniform(0, 1))
    await edit_message.edit_text("‚úÖ –ë–æ—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


async def restart_bot(call: types.CallbackQuery):
    await call.message.answer("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –æ–∂–∏–¥–∞–π—Ç–µ...")
    temp.BOT_RUNNING = False
    await start_bot_view(call)
    temp.BOT_RUNNING = True
    await call.message.answer("–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")


def register_bot_settings(dp: Router):
    dp.include_router(router)

    callback = router.callback_query.register
    message = router.message.register

    callback(bot_setting_start, text="bot_settings", state="*")

    callback(run_bot, text="run_bot", state="*")
    callback(stop_bot, text="stop_bot", state="*")
    callback(restart_bot, text="restart_bot", state="*")
